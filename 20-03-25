if not prices:
            return 0
        
        n = len(prices)
        left_profit = [0] * n  # Maximum profit if selling at or before day i
        right_profit = [0] * n  # Maximum profit if buying at or after day i
        
        # Compute maximum profit with one transaction from left to right
        min_price = prices[0]
        for i in range(1, n):
            min_price = min(min_price, prices[i])
            left_profit[i] = max(left_profit[i-1], prices[i] - min_price)
        
        # Compute maximum profit with one transaction from right to left
        max_price = prices[-1]
        for i in range(n-2, -1, -1):
            max_price = max(max_price, prices[i])
            right_profit[i] = max(right_profit[i+1], max_price - prices[i])
        
        # Combine the two profits to get the maximum possible profit
        max_profit = 0
        for i in range(n):
            max_profit = max(max_profit, left_profit[i] + right_profit[i])
        
        return max_profit
